"use strict";
/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConjugation = exports.getVerbInfo = void 0;
const spanish_verbs_1 = require("spanish-verbs");
function getVerbInfo(verb) {
    const verbInfo = {};
    for (const tense of spanish_verbs_1.validTenses) {
        verbInfo[tense] = {};
        const persons = [0, 1, 2, 3, 4, 5];
        for (const person of persons) {
            verbInfo[tense][person] = (0, spanish_verbs_1.getConjugation)(verb, tense, person);
        }
    }
    return verbInfo;
}
exports.getVerbInfo = getVerbInfo;
function getConjugation(verbsList, verb, tense, person) {
    if (!verb) {
        const err = new Error();
        err.name = 'TypeError';
        err.message = 'verb must not be null';
        throw err;
    }
    if (person !== 0 && person !== 1 && person != 2 && person !== 3 && person !== 4 && person !== 5) {
        const err = new Error();
        err.name = 'TypeError';
        err.message = 'person must be 0 1 2 3 4 or 5';
        throw err;
    }
    // must test validTenses list as is not included in browser packed packages
    if (!tense || (spanish_verbs_1.validTenses && spanish_verbs_1.validTenses.indexOf(tense)) === -1) {
        const err = new Error();
        err.name = 'TypeError';
        err.message = `tense must be ${spanish_verbs_1.validTenses.join()}`;
        throw err;
    }
    if (verbsList) {
        const verbInfo = verbsList[verb];
        if (!verbInfo) {
            const err = new Error();
            err.name = 'DictError';
            err.message = `verb ${verb} not found in list!`;
            throw err;
        }
        const verbInfoTense = verbInfo[tense];
        if (!verbInfoTense) {
            const err = new Error();
            err.name = 'DictError';
            err.message = `tense ${tense} not found for ${verb}: ${verbInfo}!`;
            throw err;
        }
        const conjugated = verbInfoTense[person];
        if (!conjugated) {
            const err = new Error();
            err.name = 'DictError';
            err.message = `person ${person} not found for ${verb}: ${conjugated}!`;
            throw err;
        }
        return conjugated;
    }
    else {
        return (0, spanish_verbs_1.getConjugation)(verb, tense, person);
    }
}
exports.getConjugation = getConjugation;
//# sourceMappingURL=index.js.map
/**
 * @license
 * Copyright 2018, Ludan Stoeckl√©
 * SPDX-License-Identifier: MIT
 */
import { VerbsInfo, AdjectivesInfo, WordsInfo, LinguisticResources } from 'rosaenlg-commons';
export type Languages = 'en_US' | 'fr_FR' | 'de_DE' | 'it_IT' | 'es_ES' | string;
export type GendersMF = 'M' | 'F';
interface LinguisticResourcesToSolve {
    verbs: string[];
    words: string[];
    adjectives: string[];
}
export declare class CodeGenHelper {
    private iso2;
    private embedResources;
    private verbCandidates;
    private wordCandidates;
    private adjectiveCandidates;
    private languageCodeGen;
    getVerbCandidates(): string[];
    getWordCandidates(): string[];
    getAdjectiveCandidates(): string[];
    constructor(language: Languages, embedResources: boolean);
    getAllLinguisticResources(linguisticResourcesToSolve: LinguisticResourcesToSolve): LinguisticResources;
    getVerbCandidatesData(): VerbsInfo;
    getWordCandidatesData(): WordsInfo;
    getAdjectiveCandidatesData(): AdjectivesInfo;
    private extractHelper;
    extractVerbCandidate(args: string): void;
    getVerbCandidate(args: string): string[] | undefined;
    extractWordCandidateFromVerbalForm(args: string): void;
    getWordCandidateFromVerbalForm(args: string): string[] | undefined;
    extractWordCandidateFromSetRefGender(args: string): void;
    getWordCandidateFromSetRefGender(args: string): string | undefined;
    private getEltsFromEltOrListArg;
    extractAdjCandidateFromSubjectVerbAdj(args: string): void;
    getAdjCandidateFromSubjectVerbAdj(args: string): string[] | undefined;
    extractAdjectiveCandidateFromAgreeAdj(args: string): void;
    getAdjectiveCandidateFromAgreeAdj(args: string): string[] | undefined;
    extractAdjectiveCandidateFromValue(args: string): void;
    getAdjectiveCandidatesFromValue(args: string): string[];
    extractWordCandidateFromThirdPossession(args: string): void;
    getWordCandidateFromThirdPossession(args: string): string[] | undefined;
    checkAtLeastParams(parsedExpr: any, atLeast: number): void;
    getParsedExpr(args: any): any;
    getStringFromArg(arg: any): string | null;
    extractWordCandidateFromValue(args: string): void;
    getWordCandidateFromValue(args: string): string[] | undefined;
}
export {};

export = generateCode;
declare function generateCode(ast: any, options: any): any;
declare namespace generateCode {
    export { Compiler as CodeGenerator };
}
/**
 * Initialize `Compiler` with the given `node`.
 *
 * @param {Node} node
 * @param {Object} options
 * @api public
 */
declare function Compiler(node: Node, options: Object): void;
declare class Compiler {
    /**
     * Initialize `Compiler` with the given `node`.
     *
     * @param {Node} node
     * @param {Object} options
     * @api public
     */
    constructor(node: Node, options: Object);
    helper: helper.CodeGenHelper;
    options: {};
    node: Node;
    bufferedConcatenationCount: number;
    hasCompiledDoctype: boolean;
    hasCompiledTag: boolean;
    pp: any;
    debug: boolean;
    indents: number;
    parentIndents: number;
    terse: boolean;
    mixins: {};
    dynamicMixins: boolean;
    eachCount: number;
    runtimeFunctionsUsed: string[];
    inlineRuntimeFunctions: any;
    runtime: (name: any) => string;
    error: (message: any, code: any, node: any) => never;
    nameFunction: (name: any) => void;
    compile: string;
    setDoctype: void;
    buffer: void;
    bufferExpression: void;
    prettyIndent: (offset: number, newline: boolean) => void;
    visit: (node: Node, parent: any) => void;
    visitNode: (node: Node) => any;
    visitCase: (node: Literal) => void;
    getUniqueName: string;
    visitItemz: (node: any) => void;
    visitSynz: (node: any) => void;
    visitItem: (node: any) => void;
    visitSyn: (node: any) => void;
    visitWhen: (node: Literal) => void;
    visitLiteral: (node: Literal) => void;
    visitNamedBlock: (block: any) => void;
    visitBlock: (block: Block) => void;
    visitMixinBlock: (block: MixinBlock) => void;
    visitDoctype: void;
    visitMixin: void;
    visitTag: void;
    visitInterpolatedTag: (tag: InterpolatedTag) => any;
    visitText: (text: Text) => void;
    visitComment: (comment: Comment) => void;
    visitYieldBlock: (block: YieldBlock) => void;
    visitBlockComment: (comment: Comment) => void;
    visitCode: (code: Code) => void;
    visitConditional: (cond: Conditional) => void;
    visitWhile: (loop: While) => void;
    visitEachz: (node: any) => void;
    visitChoosebest: (node: any) => void;
    visitProtect: (node: any) => void;
    visitSimpleJsCalls: (node: any, jsName: any) => void;
    visitRecordSaid: (node: any) => void;
    visitDeleteSaid: (node: any) => void;
    visitRecordValue: (node: any) => void;
    visitDeleteValue: (node: any) => void;
    visitTitlecase: (node: any) => void;
    visitEach: (each: Each) => void;
    visitAttributes: (attrs: any[], attributeBlocks: any) => void;
    attrs: (attrs: any, buffer: any) => any;
    attributeBlocks: (attributeBlocks: any) => any;
}
import helper = require("./helper");

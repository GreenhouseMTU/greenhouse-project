/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
import { Helper } from './Helper';
import { RandomManager } from './RandomManager';
import { SaveRollbackManager } from './SaveRollbackManager';
import { SpyI } from './Spy';
export type SynoSeq = Map<string, number>;
export type SynoTriggered = Map<string, number[]>;
export type SynoMode = 'sequence' | 'random' | 'once';
interface RunSynzParams {
    force?: number;
    mode?: SynoMode;
}
export interface SynManagerParams {
    defaultSynoMode: SynoMode;
}
type MixinFct = (elt: any, extraParams?: any) => void;
export declare class SynManager {
    private saveRollbackManager;
    private randomManager;
    private defaultSynoMode;
    protected spy: SpyI | undefined;
    private synoSeq;
    private synoTriggered;
    private helper;
    constructor(randomManager: RandomManager, saveRollbackManager: SaveRollbackManager, helper: Helper, synManagerParams: SynManagerParams);
    setSpy(spy: SpyI): void;
    protected getSpy(): SpyI;
    getSynoSeq(): SynoSeq;
    setSynoSeq(synoSeq: SynoSeq): void;
    getSynoTriggered(): SynoTriggered;
    setSynoTriggered(synoTriggered: SynoTriggered): void;
    private getSynoTriggeredOn;
    private getNextSeqNotIn;
    synFct(items: any[]): any;
    synFctHelper(items: any[] | any): any;
    simpleSyn(items: any[]): void;
    private getToTest;
    runSynz(which: MixinFct, whichName: string, size: number, params: RunSynzParams, excludeParam?: number[]): void;
}
export {};

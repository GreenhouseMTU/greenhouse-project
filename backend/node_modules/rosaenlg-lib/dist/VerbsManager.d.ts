/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
import { GenderNumberManager } from './GenderNumberManager';
import { SaveRollbackManager } from './SaveRollbackManager';
import { SynManager } from './SynManager';
import { LanguageImpl } from './LanguageImpl';
import { SpyI } from './Spy';
import { Helper } from './Helper';
import { PersonForSentence } from './SentenceManager';
import { VerbsInfo } from 'rosaenlg-commons';
import { Voice } from 'french-verbs';
export interface ConjParams {
    verb: string;
    pronominal?: boolean;
    splitPrefix?: boolean;
    tense?: string;
    voice?: Voice;
}
export type VerbParts = string[];
export type VerbPrefixes = string[];
export declare class VerbsManager {
    private languageImpl;
    private genderNumberManager;
    private synManager;
    private saveRollbackManager;
    private embeddedVerbs;
    private verbParts;
    private verbPrefixes;
    protected spy: SpyI | undefined;
    private helper;
    constructor(languageImpl: LanguageImpl, genderNumberManager: GenderNumberManager, synManager: SynManager, saveRollbackManager: SaveRollbackManager, helper: Helper);
    setSpy(spy: SpyI): void;
    protected getSpy(): SpyI;
    getVerbPartsList(): VerbParts;
    setVerbPartsList(verbParts: VerbParts): void;
    getVerbPrefixesList(): VerbPrefixes;
    setVerbPrefixes(verbPrefixes: VerbPrefixes): void;
    setEmbeddedVerbs(embeddedVerbs: VerbsInfo): void;
    private encapsulateConjParams;
    getAgreeVerb(subject: any, person: PersonForSentence | null | undefined, conjParamsOriginal: string | ConjParams, additionalParams: any): string;
    private doPopHelper;
    popVerbPartInBuffer(): void;
    popVerbPrefixInBuffer(): void;
    isVerbWithPrefix(verb: string): boolean | undefined;
}

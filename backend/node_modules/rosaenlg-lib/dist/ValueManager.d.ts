/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
import { Constants } from 'rosaenlg-commons';
import { AdjectiveManager } from './AdjectiveManager';
import { GenderNumberManager } from './GenderNumberManager';
import { Helper } from './Helper';
import { PossForm } from './LanguageEnglish';
import { DetTypes, LanguageImpl } from './LanguageImpl';
import { Genders, Numbers, Persons } from './NlgLib';
import { PossessiveManager } from './PossessiveManager';
import { RandomManager } from './RandomManager';
import { RefsManager, RepresentantType } from './RefsManager';
import { SaveRollbackManager } from './SaveRollbackManager';
import { SpyI } from './Spy';
import { SynManager } from './SynManager';
import { Dist } from '../../english-determiners/dist';
import { PersonForSentence } from './SentenceManager';
export type AdjPos = 'BEFORE' | 'AFTER';
type FullAdjStructure = string | ComplexAdjStructure;
interface ComplexAdjStructure {
    BEFORE?: string[];
    AFTER?: string[];
    SEP_BEFORE?: string;
    SEP_AFTER?: string;
}
export interface ValueParams {
    owner?: any;
    represents?: any;
    gender?: Genders;
    number?: Numbers;
    genderOwned?: Genders;
    numberOwned?: Numbers;
    genderOwner?: Genders;
    numberOwner?: Numbers;
    personOwner?: Persons;
    case?: string;
    det?: DetTypes;
    adj?: FullAdjStructure;
    adjPos?: AdjPos;
    dist?: Dist;
    debug?: boolean;
    dateFormat?: string;
    REPRESENTANT?: RepresentantType;
    AS_IS?: boolean;
    TEXTUAL?: boolean;
    ORDINAL_NUMBER?: boolean;
    ORDINAL_TEXTUAL?: boolean;
    FORMAT?: string;
    possessiveAdj?: string;
    agree?: any;
    useTheWhenPlural?: boolean;
    FORCE_DES?: boolean;
    possForm?: PossForm;
    deprel?: string;
    noun?: any;
    person?: PersonForSentence;
}
export declare class ValueManager {
    private languageImpl;
    private refsManager;
    private genderNumberManager;
    private randomManager;
    private adjectiveManager;
    private helper;
    private possessiveManager;
    private synManager;
    private saveRollbackManager;
    protected spy: SpyI | undefined;
    private simplifiedStringsCache;
    private constants;
    constructor(languageImpl: LanguageImpl, refsManager: RefsManager, genderNumberManager: GenderNumberManager, randomManager: RandomManager, adjectiveManager: AdjectiveManager, helper: Helper, possessiveManager: PossessiveManager, synManager: SynManager, saveRollbackManager: SaveRollbackManager, constants: Constants);
    setSpy(spy: SpyI): void;
    protected getSpy(): SpyI;
    private valueOfFirstParam;
    value(obj: any, params: ValueParams | undefined): void;
    private valueDate;
    private valueSimplifiedString;
    private getAdjPos;
    private getAdjStringFromList;
    private getAdjBeforeAndAfter;
    private valueString;
    private valueObject;
    private valueRefexpr;
    private valueRef;
    private valueNumberAsIs;
    private valueNumberFormat;
    private getGenderFromParams;
    private valueNumberTextual;
    private valueNumberOrdinalNumber;
    private valueNumberOrdinalTextual;
    private valueNumber;
}
export {};

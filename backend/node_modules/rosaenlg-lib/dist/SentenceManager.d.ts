/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
import { VerbsManager } from './VerbsManager';
import { ValueManager, ValueParams } from './ValueManager';
import { AdjectiveManager, Adjective } from './AdjectiveManager';
import { SynManager } from './SynManager';
import { LanguageImpl } from './LanguageImpl';
import { SpyI } from './Spy';
import { Helper } from './Helper';
import { RefExprMixinFct } from './RefsManager';
export type PersonForSentence = '1S' | '2S' | '3S' | '1P' | '2P' | '3P';
type Subject = any;
export interface SubjectGroup {
    subject?: Subject;
    person?: PersonForSentence;
    invertSubjectVerb?: boolean;
    noSubject?: boolean;
    params?: ValueParams;
}
export interface VerbalGroup {
    verb: string;
    pronominal?: boolean;
    splitPrefix?: boolean;
    tense?: string;
}
export interface ObjGroup {
    obj: any;
    type: 'DIRECT' | 'INDIRECT';
    preposition?: string;
    params?: ValueParams;
    pronounForm?: string | RefExprMixinFct;
}
export interface SentenceParams {
    subjectGroup: SubjectGroup;
    verbalGroup?: VerbalGroup;
    objGroups: ObjGroup[];
    negative?: boolean;
}
interface SubjectVerbParams extends ValueParams {
    invertSubjectVerb?: boolean;
    noSubject?: boolean;
}
export declare class SentenceManager {
    private languageImpl;
    private verbsManager;
    private valueManager;
    private adjectiveManager;
    private synManager;
    private spy;
    private helper;
    constructor(languageImpl: LanguageImpl, verbsManager: VerbsManager, valueManager: ValueManager, adjectiveManager: AdjectiveManager, synManager: SynManager, helper: Helper);
    setSpy(spy: SpyI): void;
    protected getSpy(): SpyI;
    verb(subject: any, verbInfo: any, params: SubjectVerbParams): void;
    subjectVerb(subject: any, verbInfo: any, params: SubjectVerbParams): void;
    subjectVerbAdj(subject: any, verbInfo: any, adjective: Adjective, params: any): void;
    sentence(sentenceParams: SentenceParams): void;
}
export {};

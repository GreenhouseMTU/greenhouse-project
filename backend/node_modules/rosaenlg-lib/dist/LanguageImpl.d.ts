/**
 * @license
 * Copyright 2019 Ludan StoecklÃ©
 * SPDX-License-Identifier: Apache-2.0
 */
import { Genders, Numbers, Persons } from './NlgLib';
import { GenderNumberManager, WithGender, WithNumber } from './GenderNumberManager';
import { RefsManager } from './RefsManager';
import { Helper } from './Helper';
import { AdjPos, ValueManager } from './ValueManager';
import { ConjParams, VerbParts, VerbPrefixes, VerbsManager } from './VerbsManager';
import { PersonForSentence, SentenceParams } from './SentenceManager';
import { SpyI } from './Spy';
import { Locale as dateFnsLocale } from 'date-fns';
import { LanguageCommon, DictManager, VerbsInfo } from 'rosaenlg-commons';
export type DetTypes = 'DEFINITE' | 'INDEFINITE' | 'DEMONSTRATIVE' | 'POSSESSIVE';
export { Numbers } from './NlgLib';
export interface DetParams {
    genderOwned: Genders | undefined;
    numberOwned: Numbers | undefined;
    genderOwner: Genders | undefined;
    numberOwner?: Numbers | null;
    personOwner?: Persons | null;
    case?: string | null;
    dist?: string | null;
    after: string | undefined;
    useTheWhenPlural: boolean | undefined;
    adjectiveAfterDet?: boolean | null;
    forceDes?: boolean | null;
}
export interface AgreeAdjParams extends WithGender, WithNumber {
    adjPos?: AdjPos;
    case?: string;
    det?: DetTypes;
}
export interface GrammarParsed {
    gender: Genders;
    number: Numbers;
    adj: string;
    det: DetTypes;
    adjPos: AdjPos;
    noun: string;
    unknownNoun: boolean;
}
export type SomeTense = string | UniversalTense;
type UniversalTense = 'UNIVERSAL_PRESENT' | 'UNIVERSAL_PERFECT' | 'UNIVERSAL_PLUPERFECT' | 'UNIVERSAL_FUTURE' | 'UNIVERSAL_PAST';
export declare abstract class LanguageImpl {
    iso2: string | null;
    readonly langForNumeral: string | null;
    readonly langForDateFns: dateFnsLocale | undefined;
    readonly defaultDateFormat = "yyyy-MM-dd";
    readonly n2wordsLang: string | null;
    readonly n2wordsLib: ((_: number, options: any) => string) | null;
    readonly floatingPointWord: string | null;
    readonly table0to9: string[] | null;
    readonly hasGender: boolean | null;
    readonly hasNeutral: boolean | null;
    readonly defaultAdjPos: string | null;
    readonly hasCase: boolean | null;
    readonly defaultCase: string | null;
    readonly userGenderOwnedForGender: boolean | null;
    readonly eatSpaceWhenAdjEndsWithApostrophe: boolean | null;
    readonly supportsInvertSubjectVerb: boolean | null;
    readonly defaultTense: string | null;
    readonly canPopVerbPart: boolean | null;
    readonly canPopVerbPrefix: boolean | null;
    readonly defaultLastSeparatorForAdjectives: string | null;
    readonly universalMapping: Record<string, string> | null;
    readonly spacesWhenSeparatingElements: boolean | null;
    protected valueManager: ValueManager | null;
    protected verbsManager: VerbsManager | null;
    protected refsManager: RefsManager | null;
    protected genderNumberManager: GenderNumberManager | null;
    protected spy: SpyI | null;
    protected helper: Helper | null;
    protected dictHelper: any;
    languageCommon: LanguageCommon;
    abstract getSubstantive(subst: string, number: Numbers, _theCase: string | undefined): string;
    constructor(languageCommon: LanguageCommon);
    setValueManager(valueManager: ValueManager): void;
    setVerbsManager(verbsManager: VerbsManager): void;
    setRefsManager(refsManager: RefsManager): void;
    setGenderNumberManager(genderNumberManager: GenderNumberManager): void;
    setSpy(spy: SpyI): void;
    protected getSpy(): SpyI;
    setHelper(helper: Helper): void;
    getDictManager(): DictManager;
    getLanguageCommon(): LanguageCommon;
    getDefaultLastSeparatorForAdjectives(): string;
    getDet(_det: DetTypes, _params: DetParams): string;
    getAgreeAdj(_adjective: string, _gender: Genders | undefined, _number: Numbers, _subject: any, _params: AgreeAdjParams): string;
    getWordGender(_word: string): Genders;
    getOrdinal(_val: number, _gender: Genders): string;
    getFormatNumberWithNumeral(val: number, format: string | undefined): string;
    getOrdinalNumber(val: number, _gender: Genders | undefined): string;
    getTextualNumber(val: number, _gender: Genders | undefined): string;
    private getTextualNumberFloatPart;
    getStdFormatedNumber(val: number): string;
    getFormattedDate(date: Date, dateFormat: string | undefined): string;
    getFormattedNominalGroup(possessiveAdj: string, adjBefore: string, substantive: string, adjAfter: string): string;
    parseSimplifiedString(_val: string): GrammarParsed;
    thirdPossessionTriggerRef(_owner: any, _owned: any, _params: any): void;
    thirdPossessionRefTriggered(_owner: any, _owned: any, _params: any): void;
    recipientPossession(_owned: any): void;
    protected mapPersonToNumber0to5(person: PersonForSentence): 0 | 1 | 2 | 3 | 4 | 5;
    protected mapPersonToNumber1to3(person: PersonForSentence): 1 | 2 | 3;
    protected mapPersonToSP(person: PersonForSentence): 'S' | 'P';
    getConjugation(_subject: any, _verb: string, _tense: SomeTense, _person: PersonForSentence, _conjParams: ConjParams, _embeddedVerbs: VerbsInfo | undefined, _verbParts: VerbParts, _verbPrefixes: VerbPrefixes): string;
    isVerbWithPrefix(_verb: string, _embeddedVerbs: VerbsInfo | undefined): boolean | undefined;
    isPlural(_val: number): boolean;
    sentence(_sentenceParams: SentenceParams): void;
    getPersonalPronounSubject(_person: PersonForSentence): string;
    addSeparatingSpace(): void;
    protected solveTense(originalTense: string): string;
}

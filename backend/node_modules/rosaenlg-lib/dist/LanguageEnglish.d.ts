/**
 * @license
 * Copyright 2019 Ludan Stoeckl√©
 * SPDX-License-Identifier: Apache-2.0
 */
import { ExtraParams as ExtraParamsEn } from 'english-verbs-helper';
import { LanguageCommon, VerbsInfo } from 'rosaenlg-commons';
import { DetParams, DetTypes, GrammarParsed, LanguageImpl, SomeTense } from './LanguageImpl';
import { Genders, Numbers } from './NlgLib';
import { PersonForSentence, SentenceParams } from './SentenceManager';
import { ConjParams } from './VerbsManager';
interface SentenceParamsEn extends SentenceParams {
    contractNegation?: boolean;
    negationNoDo?: boolean;
}
interface ConjParamsEn extends ConjParams, ExtraParamsEn {
    tense: string;
}
export type PossForm = 'OF' | 'S';
export declare class LanguageEnglish extends LanguageImpl {
    iso2: string;
    langForNumeral: string;
    langForDateFns: Locale;
    n2wordsLang: string;
    n2wordsLib: any;
    floatingPointWord: string;
    table0to9: string[];
    hasGender: boolean;
    hasNeutral: boolean;
    defaultAdjPos: string;
    defaultTense: string;
    defaultLastSeparatorForAdjectives: string;
    universalMapping: {
        UNIVERSAL_PRESENT: string;
        UNIVERSAL_PAST: string;
        UNIVERSAL_FUTURE: string;
        UNIVERSAL_PERFECT: string;
        UNIVERSAL_PLUPERFECT: string;
    };
    spacesWhenSeparatingElements: boolean;
    private mergedVerbsDataEn;
    constructor(languageCommon: LanguageCommon);
    getDet(det: DetTypes, params: DetParams): string;
    getAgreeAdj(adjective: string): string;
    getOrdinal(val: number): string;
    getSubstantive(subst: string, number: Numbers): string;
    parseSimplifiedString(val: string): GrammarParsed;
    thirdPossessionTriggerRef(owner: any, owned: any, params: {
        possForm: PossForm;
    }): void;
    thirdPossessionRefTriggered(owner: any, owned: any, params: any): void;
    recipientPossession(owned: any): void;
    getConjugation(_subject: any, verb: string, tense: SomeTense, person: PersonForSentence, conjParams: ConjParamsEn, embeddedVerbs: VerbsInfo): string;
    isPlural(val: number): boolean;
    getObjectPronoun(gender: Genders | undefined, number: Numbers | undefined): string;
    getPersonalPronounSubject(person: PersonForSentence): string;
    sentence(sentenceParams: SentenceParamsEn): void;
}
export {};
